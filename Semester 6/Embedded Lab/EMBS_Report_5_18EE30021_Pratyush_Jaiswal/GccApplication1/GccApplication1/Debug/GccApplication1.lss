
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000768  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000697  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d1  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000062  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UART_Init>:

bool done = false;							// for taking care of the conversion state

void UART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);		//setting baud rate low
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;			// set baud rate upper
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			// set transmission and receiver bits
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);		// 2 stop bits and 9 bit character size
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  a4:	08 95       	ret

000000a6 <UART_Transmit>:
}

void UART_Transmit(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));			// wait for empty buffer and transmit
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <UART_Transmit>
	UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	08 95       	ret

000000b4 <__vector_21>:
}
ISR(ADC_vect){								// one data point conversion done
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
	lower = ADCL;							// variable where lower 8 bits are stored
  c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lower>
	upper = ADCH;							// variable where upper 8 bits are stored
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	upper &= 0x03;							// making sure that the other 6 bits are maintained zero
  cc:	83 70       	andi	r24, 0x03	; 3
  ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <upper>
	done = true;							// conversion is completed and it is ready to be transmitted
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_12>:
EMPTY_INTERRUPT (TIMER1_COMPB_vect);		// timer interrupt when the counter overflows, just pass
  e4:	18 95       	reti

000000e6 <main>:

int main(void)
{
	UART_Init(MYUBRR);						// initialization of uart
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 48 00 	call	0x90	; 0x90 <UART_Init>
	DDRC &= 0xFE;
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0;
  f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
	TCNT1 = 0;
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = (1<<CS11)| (1<<CS10) | (1<<WGM12);		// CTC, prescaler of 8
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	80 83       	st	Z, r24
	TIMSK1 = (1<<OCIE1B);							// interrupt enable
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = COMPARE;								// top values for timer
 114:	8b e9       	ldi	r24, 0x9B	; 155
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = COMPARE;
 120:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 124:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	ADCSRA =  (1<<ADEN) |(1<<ADIE) | (1<<ADIF);		// turn ADC on, want interrupt on completion
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	88 e9       	ldi	r24, 0x98	; 152
 12e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0);			// 8 prescaler
 130:	80 81       	ld	r24, Z
 132:	83 60       	ori	r24, 0x03	; 3
 134:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0) | (0 & 7);					// select ADC0 for conversion (total 6 ADCs are present)
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRB = (1<<ADTS0) | (1<<ADTS2);				// Timer/Counter1 Compare Match B
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA |= (1<<ADATE);							// turn on automatic triggering
 142:	80 81       	ld	r24, Z
 144:	80 62       	ori	r24, 0x20	; 32
 146:	80 83       	st	Z, r24
	DIDR0 |= 0X01;									// Disabling Digital Input Buffer corresponding to ADC0 to save power 
 148:	ee e7       	ldi	r30, 0x7E	; 126
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
													// referred to documentation
	sei();											// switching interrupt on
 152:	78 94       	sei
	while(1)
	{
		//temp=(upper<<6) + (lower>>2);
		PORTB = (upper<<6) + (lower>>2);
 154:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <upper>
 158:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lower>
 15c:	86 95       	lsr	r24
 15e:	86 95       	lsr	r24
 160:	20 e4       	ldi	r18, 0x40	; 64
 162:	92 9f       	mul	r25, r18
 164:	80 0d       	add	r24, r0
 166:	11 24       	eor	r1, r1
 168:	85 b9       	out	0x05, r24	; 5
		if(done)
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	88 23       	and	r24, r24
 170:	89 f3       	breq	.-30     	; 0x154 <main+0x6e>
		{
			cli();									// clear global interrupt flag to prevent 
 172:	f8 94       	cli
													// any interrupt calling as transmission being done
			UART_Transmit((upper<<6) + (lower>>2)); // transmit the top 8 bits from 10 bits output
 174:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <upper>
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lower>
 17c:	86 95       	lsr	r24
 17e:	86 95       	lsr	r24
 180:	20 e4       	ldi	r18, 0x40	; 64
 182:	92 9f       	mul	r25, r18
 184:	80 0d       	add	r24, r0
 186:	11 24       	eor	r1, r1
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Transmit>
			done = false;							// transmission over, ready for next value conversion
 18c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			sei();									// again switching interrupt on
 190:	78 94       	sei
 192:	e0 cf       	rjmp	.-64     	; 0x154 <main+0x6e>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
