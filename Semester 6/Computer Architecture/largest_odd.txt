FindLargestOdd:
// $a0 has base adress and $a1 has n i.e. size of array assuming array has atleast 1 odd number

lw $t1, 0($a0)       // t1 has largest number, initialized with arr[0]
addi $t3, $r0, $r0   // iterator i, initialized at 0
lw $t2, 0($a1)       // load value n(size of array) in t2

init:                // update max until first odd not found
andi $t7, $t1, 1     // checking if current element is odd
bne $t7, $r0, LOOP
addi $t3, $t3, 1     // incrementing i
beq $t3, $t2, No_odd // if i==n skip
sll $t4, $t3, 2      // 4*i
add $t4, $t4, $a0    // 4*i + base_address
lw $t1, 0($t4)       // updating max as arr[i]
j init

LOOP:                // it will run for one more iteration as incre is done after, so null compare max with max once in the 
                     //beginning
beq $t3, $t2, EXIT   // if i==n exit the loop
sll $t4, $t3, 2      // 4*i
add $t4, $t4, $a0    // base + 4*i is the address of arr[i]
lw $t5, 0($t4)       // value of arr[i]
andi $t7, $t5, 1     // capturing the lsb
beq $t7, $r0, INCRE  // if arr[i] is even do i++
slt $t6, $t5, $t1    // if t5<t1 then t6=1, i.e. no need to do anything
bne $t6, $r0, INCRE  // if t6!=0 ie t6==1 no need to update max jump to iterator increment
add $t1, $r0, $t5    // update the max
  
INCRE:
addi $t3,$t3,1       // increasing the iterator
j LOOP

No_odd:
add $t1, $r0, $r0    // if no odd return 0

EXIT:
add $v0, $t1, $r0    // returning max
jr $r31  